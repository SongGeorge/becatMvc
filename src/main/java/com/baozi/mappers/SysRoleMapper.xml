<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.baozi.mappers.SysRoleMapper" >
  <resultMap id="BaseResultMap" type="com.baozi.po.SysRole" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="available" property="available" jdbcType="CHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, available
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.baozi.po.SysRoleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sys_role
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from sys_role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sys_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.baozi.po.SysRoleExample" >
    delete from sys_role
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.baozi.po.SysRole" >
    insert into sys_role (id, name, available
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{available,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.baozi.po.SysRole" >
    insert into sys_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="available != null" >
        available,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="available != null" >
        #{available,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.baozi.po.SysRoleExample" resultType="java.lang.Integer" >
    select count(*) from sys_role
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update sys_role
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.available != null" >
        available = #{record.available,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update sys_role
    set id = #{record.id,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      available = #{record.available,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.baozi.po.SysRole" >
    update sys_role
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="available != null" >
        available = #{available,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.baozi.po.SysRole" >
    update sys_role
    set name = #{name,jdbcType=VARCHAR},
      available = #{available,jdbcType=CHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- 查询用户全部的role & permission -->
  <resultMap id="findNowAllPermission_resultMap" extends="BaseResultMap" type="com.baozi.po.SysRole" >
    <collection property="permissions" javaType="com.baozi.po.SysPermission">
      <id column="pid" property="id" jdbcType="BIGINT" />
      <result column="pname" property="name" jdbcType="VARCHAR" />
      <result column="url" property="url" jdbcType="VARCHAR" />
    </collection>
  </resultMap>

  <!-- 根据用户ID，查询所有权限 -->
  <select id="findNowAllPermission" resultMap="findNowAllPermission_resultMap">
    select ur.id,ur.name,up.id pid,up.url,up.name pname
    from (select sys_role_id from sys_user_role where sys_user_id = #{userId}) uur
    left join sys_role ur on uur.sys_role_id = ur.id
    left join sys_role_permission urp on urp.sys_role_id = ur.id
    left join sys_permission up on up.id = urp.sys_permission_id
    where up.id is not null and up.type in ('permission','button') and up.available=1
  </select>

  <select id="findSysRolePage" resultType="com.baozi.vo.SysRoleVo" parameterType="map">
    select * from sys_role s
    <where>
      <if test="name!=null and name!='' ">
        and s.name like CONCAT('%', #{name}, '%')
      </if>
    </where>
    order by s.id desc
  </select>

  <select id="findUserRoleAllocationPage" resultType="com.baozi.vo.UserRoleAllocationVo" parameterType="map">
    select u.id,u.username,u.email,u.create_time,u.last_login_time,u.locked ,group_concat(ur.name) roleNames,group_concat(ur.id)roleIds from
	 sys_user u
	left join sys_user_role uur on uur.sys_user_id = u.id
	left join sys_role ur on ur.id = uur.sys_role_id
    <where>
    <if test="content != null and content !='' " >
	    and (
			u.usercode like  LOWER(CONCAT("%",#{content,jdbcType=VARCHAR},"%"))
            or
			u.username like  LOWER(CONCAT("%",#{content,jdbcType=VARCHAR},"%"))
          )
    </if>
    </where>
	group by u.id
  </select>

</mapper>